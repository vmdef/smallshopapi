openapi: 3.0.3
info:
  title: Small Shop
  description: 'This REST API allows to manage the customer data of a small shop. It will work as the backend side for a CRM interface that is being developed by a different team.'
  termsOfService: https://smallshop.api/terms/
  contact:
    email: fitodeniz@gmail.com
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 1.0.0
externalDocs:
  description: Official documentation
  url: http://smallshop.api
servers:
- url: http://localhost:8080
tags:
- name: customer
  description: Everything about Small Shop customers
  externalDocs:
    description: Find out more about customers
    url: https://smallshop.api/docs/
- name: user
  description: Operations about CRM users
  externalDocs:
    description: Find out more about users
    url: https://smallshop.api/docs/
paths:
  /api/v1/customers:
    get:
      tags:
        - customer
      summary: Returns the small shop customers
      description: Returns all the small shop customers
      operationId: getCustomers
      responses:
        200:
          description: Small shop customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        404:
          description: Order doesn't exist for given user.
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
    put:
      tags:
      - customer
      summary: Update an existing customer
      operationId: updateCustomer
      requestBody:
        description: Customers object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Customer not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
    post:
      tags:
      - customer
      summary: Add a new shop customer
      operationId: addCustomer
      requestBody:
        description: Customer object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
  /api/v1/customers/{customerId}:
    get:
      tags:
      - customer
      summary: Find customer by ID
      description: Returns a single customer
      operationId: getCustomerById
      parameters:
      - name: customerId
        in: path
        description: ID of customer to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Customer not found
          content: {}
      security:
      - smallshop_auth:
        - write:customer
        - read:customers
    delete:
      tags:
      - customer
      summary: Deletes a customer
      operationId: deleteCustomer
      parameters:
      - name: customerId
        in: path
        description: Customer id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Customer not found
          content: {}
      security:
      - smallshop_auth:
        - write:customer
        - read:customers
  /api/v1/customers/{customerId}/uploadImage:
    post:
      tags:
      - customer
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: customerId
        in: path
        description: ID of customer to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelApiResponse'
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
  /api/v1/users:
    post:
      tags:
        - user
      summary: Signup the a new user
      description: Creates a new user, who can login.
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: For successful user creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
      security:
      - smallshop_auth:
        - write:customers
        - read:customers      
  /api/v1/users/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
  /api/v1/users/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
  /api/v1/users/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - smallshop_auth:
        - write:customers
        - read:customers
  /api/v1/auth/token:
    post:
      tags:
        - user
      summary: Signin the customer (user)
      description: Signin the customer (user) that generates the JWT (access token) and refresh token, which can be used for accessing APIs.
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInReq'
      responses:
        200:
          description: For user sign-in. Once successful, user receives the access and refresh token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
    delete:
      tags:
        - user
      summary: Signouts the customer (user)
      description: Signouts the customer (user). It removes the refresh token from DB. Last issued JWT should be removed from client end that if not removed last for given expiration time.
      operationId: signOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        202:
          description: Accepts the request for logout.
  /api/v1/auth/token/refresh:
    post:
      tags:
        - user
      summary: Provides new JWT based on valid refresh token.
      description: Provides new JWT based on valid refresh token.
      operationId: getAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        200:
          description: For successful operation.
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/SignedInUser'
components:
  schemas:
    Customer:
      required:
        - id
        - name
        - surname
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        photourl:
          type: string
        creatorId:
          type: integer
          format: int64
    User:
      required:
        - id
        - name
        - surname
        - isAdmin
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        isadmin:
          type: boolean
    SignInReq:
      description: Request body for Sign-in
      type: object
      properties:
        username:
          description: username of the User
          type: string
        password:
          description: password of the User
          type: string
    SignedInUser:
      description: Signed-in user information
      type: object
      properties:
        refreshToken:
          description: Refresh Token
          type: string
        accessToken:
          description: JWT Token aka access token
          type: string
        username:
          description: User Name
          type: string
        userId:
          description: User Identifier
          type: string
    RefreshToken:
      description: Contains the refresh token
      type: object
      properties:
        refreshToken:
          description: Refresh Token
          type: string
    ModelApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    smallshop_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://smallshop.api/oauth/dialog
          scopes:
            write:customers: modify customers
            read:customers: read customers
            write:users: modify users
            read:users: read users
